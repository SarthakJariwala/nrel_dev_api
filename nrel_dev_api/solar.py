# AUTOGENERATED! DO NOT EDIT! File to edit: 00_solar.ipynb (unless otherwise specified).

__all__ = ['SolarResourceData', 'BASE_URL', 'PVWattsV6', 'SolarDatasetQuery']

# Cell
import requests


BASE_URL = "https://developer.nrel.gov"

# TODO - add attributes in docstring, add checks for data inputs
class SolarResourceData:
    """Returns various types of solar data for a location.
    The service from NREL currently returns data for
    average Direct Normal Irradiance, average Global Horizontal Irradiance,
    and average Tilt at Latitude. The data outout format can be json or xml
    """

    QUERY_URL = "/api/solar/solar_resource/v1."

    def __init__(self, api_key, lat=None, lon=None, address=None, output_format="json"):

        self._params = {"api_key": api_key}

        # if address is not specified latitude and longitude must be specified
        if not address:
            self._params.update({"lat" : lat, "lon" : lon})
        else:
            self._params.update({"address": address})

        self.output_format = output_format

    def get(self):
        """Process the get request"""
        resp = requests.get(BASE_URL + self.QUERY_URL + f"{self.output_format}", params=self._params)
        content = resp.json()
        return content


# Cell

# TODO - add attributes in docstring, add checks for data inputs
class PVWattsV6:
    """Estimate the energy production of grid-connected photovoltaic (PV) energy systems
    using NREL's PVWatts API based on a few simple inputs.
    """

    QUERY_URL = "/api/pvwatts/v6."

    def __init__(self,
                 api_key,
                 system_capacity,
                 module_type,
                 losses,
                 array_type,
                 tilt,
                 azimuth,
                 lat=None,
                 lon=None,
                 address=None,
                 file_id=None,
                 dataset="nsrdb",
                 radius=100,
                 timeframe="monthly",
                 dc_ac_ratio=1.2,
                 gcr=0.4,
                 inv_eff=96,
                 output_format="json"):

        self._params = {
            "api_key" : api_key,
            "system_capacity" : system_capacity,
            "module_type" : module_type,
            "losses" : losses,
            "array_type" : array_type,
            "tilt" : tilt,
            "azimuth" : azimuth,
        }

        # only one of lat/lon, file_id, address needs to be specified
        if not address and not file_id:
            self._params.update({"lat" : lat, "lon" : lon})

        if not file_id and not lat and not lon:
            self._params.update({"address" : address})

        if not address and not lat and lon:
            self._params.update({"file_id" : file_id})

        # if file_id is specified, dataset info is not required
        if not file_id:
            self._params.update({"dataset" : dataset})

        self._params.update({
            "radius" : radius,
            "timeframe" : timeframe,
            "dc_ac_ratio" : dc_ac_ratio,
            "gcr" : gcr,
            "inv_eff" : inv_eff
        })

        self.output_format = output_format

    def get(self):
        """Process the get request"""
        resp = requests.get(BASE_URL + self.QUERY_URL + f"{self.output_format}", params=self._params)
        content = resp.json()
        return content

# Cell

# TODO - add attributes in docstring, add checks for data inputs
class SolarDatasetQuery:

    """Returns information on the closest climate data for a location.
    """

    QUERY_URL = "/api/solar/data_query/v1."

    def __init__(self,
                 api_key,
                 lat=None,
                 lon=None,
                 address=None,
                 radius=100,
                 return_all_stations=False,
                 output_format="json"
                ):

        self._params = {
            "api_key" : api_key,
            "radius" : radius,
            "all" : 0 if return_all_stations is False else 1,
        }

        # if address is not specified latitude and longitude must be specified
        if not address:
            self._params.update({"lat" : lat, "lon" : lon})
        else:
            self._params.update({"address": address})

        self.output_format = output_format

    def get(self):
        """Process the get request"""
        resp = requests.get(BASE_URL + self.QUERY_URL + f"{self.output_format}", params=self._params)
        content = resp.json()
        return content