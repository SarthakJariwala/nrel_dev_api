# AUTOGENERATED! DO NOT EDIT! File to edit: 01_solar.ipynb (unless otherwise specified).

__all__ = ['SolarResourceData', 'PVWattsV6', 'SolarDatasetQuery']

# Cell
from .core import _GetPostRequest

# TODO - add attributes in docstring, add checks for data inputs
class SolarResourceData(_GetPostRequest):
    """Returns various types of solar data for a location as a dictionary.
    The service from NREL currently returns data for
    average Direct Normal Irradiance, average Global Horizontal Irradiance,
    and average Tilt at Latitude.

    Attributes:
        api_key: NREL Developer API key (https://developer.nrel.gov/signup/).
        lat: Latitude of the location.
        lon: Longitude of the location.
        address: Address of the location to use. Required if lat/lon not specified.
    """

    QUERY_URL = "/api/solar/solar_resource/v1.json"

    def __init__(self, api_key, lat=None, lon=None, address=None):

        super().__init__()

        self._params.update({"api_key": api_key})

        # if address is not specified latitude and longitude must be specified
        if not address:
            self._params.update({"lat" : lat, "lon" : lon})
        else:
            self._params.update({"address": address})

        # complete response as a dict
        self.response = self._get()

        # only the outputs
        self.outputs = self.response["outputs"]

        # get the inputs provided
        self.inputs = self.response["inputs"]

# Cell

# TODO - add attributes in docstring, add checks for data inputs
class PVWattsV6(_GetPostRequest):
    """Estimate the energy production of grid-connected photovoltaic (PV) energy systems
    using NREL's PVWatts API based on a few simple inputs.
    """

    QUERY_URL = "/api/pvwatts/v6.json"

    def __init__(self,
                 api_key,
                 system_capacity,
                 module_type,
                 losses,
                 array_type,
                 tilt,
                 azimuth,
                 lat=None,
                 lon=None,
                 address=None,
                 file_id=None,
                 dataset="nsrdb",
                 radius=100,
                 timeframe="monthly",
                 dc_ac_ratio=1.2,
                 gcr=0.4,
                 inv_eff=96,
                ):

        super().__init__()

        self._params.update({
            "api_key" : api_key,
            "system_capacity" : system_capacity,
            "module_type" : module_type,
            "losses" : losses,
            "array_type" : array_type,
            "tilt" : tilt,
            "azimuth" : azimuth,
        })

        # only one of lat/lon, file_id, address needs to be specified
        if not address and not file_id:
            self._params.update({"lat" : lat, "lon" : lon})

        if not file_id and not lat and not lon:
            self._params.update({"address" : address})

        if not address and not lat and lon:
            self._params.update({"file_id" : file_id})

        # if file_id is specified, dataset info is not required
        if not file_id:
            self._params.update({"dataset" : dataset})

        self._params.update({
            "radius" : radius,
            "timeframe" : timeframe,
            "dc_ac_ratio" : dc_ac_ratio,
            "gcr" : gcr,
            "inv_eff" : inv_eff
        })

        # get the complete response
        self.response = self._get()

        # only the outputs category
        self.outputs = self.response["outputs"]

        # station info for the specified lat/lon
        self.station_info = self.response["station_info"]

        # get the inputs provided
        self.inputs = self.response["inputs"]

# Cell

# TODO - add attributes in docstring, add checks for data inputs
class SolarDatasetQuery(_GetPostRequest):

    """Returns information on the closest climate data for a location.
    """

    QUERY_URL = "/api/solar/data_query/v1.json"

    def __init__(self,
                 api_key,
                 lat=None,
                 lon=None,
                 address=None,
                 radius=100,
                 return_all_stations=False,
                ):

        super().__init__()

        self._params.update({
            "api_key" : api_key,
            "radius" : radius,
            "all" : 0 if return_all_stations is False else 1,
        })

        # if address is not specified latitude and longitude must be specified
        if not address:
            self._params.update({"lat" : lat, "lon" : lon})
        else:
            self._params.update({"address": address})

        self.response = self._get()

        # only outputs
        self.outputs = self.response["outputs"]

        # get the inputs provided
        self.inputs = self.response["inputs"]